" KEY MAPPING

" buffer navigation (alt-left, alt-right)
"noremap [1;3C :bnext<CR>
"noremap [1;3D :bprev<CR>
noremap [1;3C :BufSurfForward<CR>
noremap [1;3D :BufSurfBack<CR>

"YankRing
nnoremap <silent> <F10> ::CtrlPYankring<CR>

" quick write
nnoremap <Leader>w :w<CR>
noremap! ZQ WQ

"This allows for change paste motion cp{motion}
nmap <silent> cp :set opfunc=ChangePaste<CR>g@

" set paste
nmap <leader>pp :set paste<cr>

" map backspace for SCO and Synergy compat
inoremap <BS> <c-r>=Backspace()<CR>

" system clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

" buffer copy/paste
vmap <F7> "+ygv"zy`>
vmap <S-F7> "+p
nmap <S-F7> "+p
imap <S-F7> <ESC>"+p


" allow arrow keys with modifiers in tmux/screen
if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

" DISABLE ARROW KEYS
" noremap  <Up> ""
" noremap! <Up> <Esc>
" noremap  <Down> ""
" noremap! <Down> <Esc>
" noremap  <Left> ""
" noremap! <Left> <Esc>
" noremap  <Right> ""
" noremap! <Right> <Esc>
" END DISABLE ARROW KEYS

" next/prev row not line
noremap j gj 
noremap k gk
" insert line below with enter
"map <CR> O<Esc>j
" insert line above with enter
map <CR> o<Esc>

inoremap <Nul> <C-n>

noremap <F2> :wall \|!ctags -R --extra=+f<CR>
noremap! <F2> <ESC><F2>

noremap <silent> <F3> :NERDTreeToggle<CR>
noremap! <silent> <F3> <ESC><F3>

noremap <silent> <F4> :NERDTreeFind<CR>
noremap! <silent> <F4> <ESC><F4>

noremap <S-Tab> <C-W><C-W>
noremap! <S-Tab> <C-W><C-W>

noremap <C-F5> :wall \|:SingleCompile<CR>
noremap! <C-F5> <ESC><C-F5>

noremap <F5> :wall \|:SingleCompileRun<CR>
noremap! <F5> <ESC><F5>

noremap <S-F5> :wall \|:!mocha %<CR>
noremap! <S-F5> <ESC><S-F5>


noremap <silent> <F9> :TComment<CR> 
noremap! <silent> <F9> <ESC><F9>

noremap <silent> <C-F9> :TCommentBlock<CR> 
noremap! <silent> <C-F9> <ESC><C-F9>

"noremap gt :tag <C-R><C-W><CR>
noremap gt :tj <C-R><C-W><CR>

noremap err :cope <CR> <CR> :ccl <CR>

noremap <silent> ,,f <ESC>:CommandT<CR>
noremap <silent> ,,b <ESC>:CommandTBuffer<CR>
noremap <silent> ,,j <ESC>:CommandTJump<CR>

command! ToggleWrap :set invwrap

" Centre screen on current line stuff
noremap <space> zz
noremap n nzz
noremap N Nzz


" Plugin Specific
" let g:SuperTabMappingForward = '<c-space>'
" let g:SuperTabMappingBackward = '<s-c-space>'
" let g:SuperTabMappingTabLiteral = '<tab>'
" let g:SuperTabDefaultCompletionType = "context"

let g:tcommentMapLeader1=''
let g:tcommentMapLeader2=''

" Open file
map <leader>o <esc>:CtrlP<CR>
map <leader>b <esc>:CtrlPMRUFiles<CR>
map <leader>B <esc>:CtrlPBuffer<CR>
" let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" expand region plugin
" v selects char, vv word, vvv paragraph
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

map <Leader>k <Plug>RubyTestRun
map <Leader>kk <Plug>RubyFileRun
map <Leader>kj <Plug>RubyLastTestRun

if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

noremap <F7> za
noremap! <F7> <ESC>za
"noremap <S-F6> zA
"noremap! <S-F6> <ESC>zA
"
"
"noremap <silent> <F10> :CtrlPYankRing<CR>
