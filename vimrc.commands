# Custom commands and autocommands
command! -nargs=1 -range SuperRetab <line1>,<line2>s/\v%(^ *)@<= {<args>}/\t/g
command! -range=% -nargs=0 Tab2Space execute "<line1>,<line2>s/^\\t\\+/\\=substitute(submatch(0), '\\t', repeat(' ', ".&ts."), 'g')"
command! -range=% -nargs=0 Space2Tab execute "<line1>,<line2>s/^\\( \\{".&ts."\\}\\)\\+/\\=substitute(submatch(0), ' \\{".&ts."\\}', '\\t', 'g')"

"easy syntax swapping
command! SyntaxPerl set syntax=perl<CR>
command! SyntaxPython set syntax=python<CR>
command! SyntaxRuby set syntax=ruby<CR>

" HTML/JS/CSS Setup
au BufNewFile,BufRead *.js,*.html,*.css:
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2 


" Ruby Setup
au BufEnter,BufNewFile,BufReadPost *.rb set syntax=ruby
"let g:rubytest_in_quickfix = 1 
"Tcomment no extra indents
command! SetRubyComment :call TCommentDefineType("ruby", "#%s")
"Change which file opens after executing :Rails command
let g:rails_default_file='config/database.yml'

" Python Setup
autocmd BufRead,BufNewFile *.py,*.pyw,*.pyp set filetype=python
autocmd BufRead,BufNewFile *.py,*.pyw,*.pyp syntax on
autocmd BufRead,BufNewFile *.py,*.pyw,*.pyp set ai
" autocmd BufRead *.p,*.pywy set smartindent cinwords=if,elif,else,for,while,with,try,except,finally,def,class
highlight BadWhitespace ctermbg=red guibg=darkred
autocmd BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/
au BufNewFile,BufRead *.py:
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

let python_highlight_all=1

" Should not be needed as now using vim-virtualenv
" "python with virtualenv support
" py << EOF
" import os
" import sys
" if 'VIRTUAL_ENV' in os.environ:
"   project_base_dir = os.environ['VIRTUAL_ENV']
"   activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
"   execfile(activate_this, dict(__file__=activate_this))
" EOF


" PHP Setup
" run file with PHP CLI (F5)
autocmd FileType php noremap <F5> :w!<CR>:!php %<CR>
" PHP parser check (CTRL-F5)
autocmd FileType php noremap <C-F5> :!php -l %<CR>

" Coffee Setup
au BufNewFile,BufReadPost,BufEnter *.coffee set syntax=coffee
command -nargs=1 C CoffeeCompile | :<args>

" XmlPretty
command! -range=% Xmlpretty :call XmlPretty(<line1>, <line2>)

" Git commit
autocmd Filetype gitcommit setlocal spell textwidth=72

" see what highlighting rules are in place on current line
command! CurrentHighlight :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . "> trans<" . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"

"au VimLeavePre * mksession! project.session
command! WQ :mksession! project.session | qall!

" not automatically jump to first error on save
let g:syntastic_auto_jump=0

" make * register use system clipboard
set clipboard=unnamedplus

" copy buffer to clipboard
command! -range=% CopyToClipboard :%:w !xclip -i -sel c<CR>

func Backspace()
 	if col('.') == 1
   	if line('.')  != 1
			return "\<ESC>kA\<Del>"
		else
			return ""
		endif
	else
		return "\<Left>\<Del>"
	endif
endfunc
